pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'demo-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }
        
        // stage('Test') {
        //     steps {
        //         echo 'Running tests...'
        //         // Simple HTML validation
        //         sh '''
        //             if grep -q "<!DOCTYPE html>" index.html; then
        //                 echo "HTML structure is valid"
        //             else
        //                 echo "HTML structure is invalid"
        //                 exit 1
        //             fi
        //         '''
        //     }
        // }
        
        stage('Build') {
            steps {
                echo 'Building application...'
                // Create build info file
                // sh '''
                //     echo "Build: ${BUILD_NUMBER}" > build-info.txt
                //     echo "Built on: ${new Date().format("yyyy-MM-dd HH:mm:ss")}" >> build-info.txt
                // '''
                
                // Build Docker image
                sh '''
                    cd ~/demo/
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
                // Stop and remove existing containers
                sh 'docker-compose down || true'
                
                // Start the new version
                sh 'docker-compose up -d'
                
                // Clean up old images
                // sh '''
                //     docker image prune -f
                //     docker system prune -f
                // '''
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
            // Archive the build artifacts
            archiveArtifacts artifacts: 'build-info.txt'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}
